// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: Bestiary/Bestiary.proto

package Bestiary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BestiaryService_BestiaryCreate_FullMethodName = "/Bestiary.BestiaryService/BestiaryCreate"
	BestiaryService_BestiaryUpdate_FullMethodName = "/Bestiary.BestiaryService/BestiaryUpdate"
	BestiaryService_BestiaryDelete_FullMethodName = "/Bestiary.BestiaryService/BestiaryDelete"
	BestiaryService_BestiaryLoad_FullMethodName   = "/Bestiary.BestiaryService/BestiaryLoad"
	BestiaryService_MonsterCreate_FullMethodName  = "/Bestiary.BestiaryService/MonsterCreate"
	BestiaryService_MonsterUpdate_FullMethodName  = "/Bestiary.BestiaryService/MonsterUpdate"
	BestiaryService_MonsterDelete_FullMethodName  = "/Bestiary.BestiaryService/MonsterDelete"
	BestiaryService_BestiaryGet_FullMethodName    = "/Bestiary.BestiaryService/BestiaryGet"
)

// BestiaryServiceClient is the client API for BestiaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BestiaryServiceClient interface {
	BestiaryCreate(ctx context.Context, in *BCRequest, opts ...grpc.CallOption) (*BCResponse, error)
	BestiaryUpdate(ctx context.Context, in *BURequest, opts ...grpc.CallOption) (*BUResponse, error)
	BestiaryDelete(ctx context.Context, in *BDRequest, opts ...grpc.CallOption) (*BDResponse, error)
	BestiaryLoad(ctx context.Context, in *BLoadRequest, opts ...grpc.CallOption) (*BLoadResponse, error)
	MonsterCreate(ctx context.Context, in *MCRequest, opts ...grpc.CallOption) (*MCResponse, error)
	MonsterUpdate(ctx context.Context, in *MURequest, opts ...grpc.CallOption) (*MUResponse, error)
	MonsterDelete(ctx context.Context, in *MDRequest, opts ...grpc.CallOption) (*MDResponse, error)
	BestiaryGet(ctx context.Context, in *BGRequest, opts ...grpc.CallOption) (*BGResponse, error)
}

type bestiaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBestiaryServiceClient(cc grpc.ClientConnInterface) BestiaryServiceClient {
	return &bestiaryServiceClient{cc}
}

func (c *bestiaryServiceClient) BestiaryCreate(ctx context.Context, in *BCRequest, opts ...grpc.CallOption) (*BCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BCResponse)
	err := c.cc.Invoke(ctx, BestiaryService_BestiaryCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bestiaryServiceClient) BestiaryUpdate(ctx context.Context, in *BURequest, opts ...grpc.CallOption) (*BUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BUResponse)
	err := c.cc.Invoke(ctx, BestiaryService_BestiaryUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bestiaryServiceClient) BestiaryDelete(ctx context.Context, in *BDRequest, opts ...grpc.CallOption) (*BDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BDResponse)
	err := c.cc.Invoke(ctx, BestiaryService_BestiaryDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bestiaryServiceClient) BestiaryLoad(ctx context.Context, in *BLoadRequest, opts ...grpc.CallOption) (*BLoadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BLoadResponse)
	err := c.cc.Invoke(ctx, BestiaryService_BestiaryLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bestiaryServiceClient) MonsterCreate(ctx context.Context, in *MCRequest, opts ...grpc.CallOption) (*MCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MCResponse)
	err := c.cc.Invoke(ctx, BestiaryService_MonsterCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bestiaryServiceClient) MonsterUpdate(ctx context.Context, in *MURequest, opts ...grpc.CallOption) (*MUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MUResponse)
	err := c.cc.Invoke(ctx, BestiaryService_MonsterUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bestiaryServiceClient) MonsterDelete(ctx context.Context, in *MDRequest, opts ...grpc.CallOption) (*MDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MDResponse)
	err := c.cc.Invoke(ctx, BestiaryService_MonsterDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bestiaryServiceClient) BestiaryGet(ctx context.Context, in *BGRequest, opts ...grpc.CallOption) (*BGResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BGResponse)
	err := c.cc.Invoke(ctx, BestiaryService_BestiaryGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BestiaryServiceServer is the server API for BestiaryService service.
// All implementations must embed UnimplementedBestiaryServiceServer
// for forward compatibility.
type BestiaryServiceServer interface {
	BestiaryCreate(context.Context, *BCRequest) (*BCResponse, error)
	BestiaryUpdate(context.Context, *BURequest) (*BUResponse, error)
	BestiaryDelete(context.Context, *BDRequest) (*BDResponse, error)
	BestiaryLoad(context.Context, *BLoadRequest) (*BLoadResponse, error)
	MonsterCreate(context.Context, *MCRequest) (*MCResponse, error)
	MonsterUpdate(context.Context, *MURequest) (*MUResponse, error)
	MonsterDelete(context.Context, *MDRequest) (*MDResponse, error)
	BestiaryGet(context.Context, *BGRequest) (*BGResponse, error)
	mustEmbedUnimplementedBestiaryServiceServer()
}

// UnimplementedBestiaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBestiaryServiceServer struct{}

func (UnimplementedBestiaryServiceServer) BestiaryCreate(context.Context, *BCRequest) (*BCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestiaryCreate not implemented")
}
func (UnimplementedBestiaryServiceServer) BestiaryUpdate(context.Context, *BURequest) (*BUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestiaryUpdate not implemented")
}
func (UnimplementedBestiaryServiceServer) BestiaryDelete(context.Context, *BDRequest) (*BDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestiaryDelete not implemented")
}
func (UnimplementedBestiaryServiceServer) BestiaryLoad(context.Context, *BLoadRequest) (*BLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestiaryLoad not implemented")
}
func (UnimplementedBestiaryServiceServer) MonsterCreate(context.Context, *MCRequest) (*MCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonsterCreate not implemented")
}
func (UnimplementedBestiaryServiceServer) MonsterUpdate(context.Context, *MURequest) (*MUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonsterUpdate not implemented")
}
func (UnimplementedBestiaryServiceServer) MonsterDelete(context.Context, *MDRequest) (*MDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonsterDelete not implemented")
}
func (UnimplementedBestiaryServiceServer) BestiaryGet(context.Context, *BGRequest) (*BGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestiaryGet not implemented")
}
func (UnimplementedBestiaryServiceServer) mustEmbedUnimplementedBestiaryServiceServer() {}
func (UnimplementedBestiaryServiceServer) testEmbeddedByValue()                         {}

// UnsafeBestiaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BestiaryServiceServer will
// result in compilation errors.
type UnsafeBestiaryServiceServer interface {
	mustEmbedUnimplementedBestiaryServiceServer()
}

func RegisterBestiaryServiceServer(s grpc.ServiceRegistrar, srv BestiaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedBestiaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BestiaryService_ServiceDesc, srv)
}

func _BestiaryService_BestiaryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).BestiaryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_BestiaryCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).BestiaryCreate(ctx, req.(*BCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BestiaryService_BestiaryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).BestiaryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_BestiaryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).BestiaryUpdate(ctx, req.(*BURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BestiaryService_BestiaryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).BestiaryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_BestiaryDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).BestiaryDelete(ctx, req.(*BDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BestiaryService_BestiaryLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).BestiaryLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_BestiaryLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).BestiaryLoad(ctx, req.(*BLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BestiaryService_MonsterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).MonsterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_MonsterCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).MonsterCreate(ctx, req.(*MCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BestiaryService_MonsterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).MonsterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_MonsterUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).MonsterUpdate(ctx, req.(*MURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BestiaryService_MonsterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).MonsterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_MonsterDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).MonsterDelete(ctx, req.(*MDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BestiaryService_BestiaryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BestiaryServiceServer).BestiaryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BestiaryService_BestiaryGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BestiaryServiceServer).BestiaryGet(ctx, req.(*BGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BestiaryService_ServiceDesc is the grpc.ServiceDesc for BestiaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BestiaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bestiary.BestiaryService",
	HandlerType: (*BestiaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BestiaryCreate",
			Handler:    _BestiaryService_BestiaryCreate_Handler,
		},
		{
			MethodName: "BestiaryUpdate",
			Handler:    _BestiaryService_BestiaryUpdate_Handler,
		},
		{
			MethodName: "BestiaryDelete",
			Handler:    _BestiaryService_BestiaryDelete_Handler,
		},
		{
			MethodName: "BestiaryLoad",
			Handler:    _BestiaryService_BestiaryLoad_Handler,
		},
		{
			MethodName: "MonsterCreate",
			Handler:    _BestiaryService_MonsterCreate_Handler,
		},
		{
			MethodName: "MonsterUpdate",
			Handler:    _BestiaryService_MonsterUpdate_Handler,
		},
		{
			MethodName: "MonsterDelete",
			Handler:    _BestiaryService_MonsterDelete_Handler,
		},
		{
			MethodName: "BestiaryGet",
			Handler:    _BestiaryService_BestiaryGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Bestiary/Bestiary.proto",
}
